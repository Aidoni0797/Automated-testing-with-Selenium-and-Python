99999994

Составные сообщения об ошибках

Отдельно хочется поговорить про качество сообщений об ошибках, которые показывает при падении теста. Почему это важно?
Хорошо написанный текст помогает быстро локализовать найденный баг и разобраться в том, что произошло и из-за чего тест упал.
Хороший asser сэкономит вам часы вашей работы, особенно когда количество тестов переходит за сотню.

В целом, тут как с любым фидбеком: важно давать его точно и актуально. Если вы проверяете наличие элемента, то обязательно
пишите, что это за элемент по смыслу на странице:

assert self.is_element_present('create_class_button', timeout=30), "No create class button"

Примечание: функция is_element_present() вспомогательная. Как её реализовать и использовать, мы разберемся четь позже.

Если элеент встречается на нескольких страницах приложения, не лишним будет указать, где именно произошла ошибка:

assert self.is_element_present('new_announcement_button', timeout=30), "No new announcement button on profile page"

Если вы работает с каким-то текстом (например, проверяете информационное сообщение, текущий url, 
ссылку, placeholder в input-элементе или любой другой текст), в сообщений об ошибке всегда лучше выводить оба значения: то,
которое ожидалось, и то, которое получили по факту. Всё как в хорошем багрепорте: ожидаемый и фактический результать.

Форматирование строк  с помощью конкатенации строк, например:

В питоне такое можно провернуть с помощью конкатениции строк, например:

actual_result = "abrakadabra"
print("Wrong text, got " + actual+result + ", something wrong")

Но из-за обилия кавычек, знаков и вот этого всего этот способ не самый удобный и читается тоже плохо.

Форматирование строк с помощью str.format

Гораздо лучше воспользоваться возможностью python для форматирования строк. Дополнительно можно почитать здесь:
https://realpython.com/python-string-formatting/#using-the-formatting-mini-language-with-format

Если вкратце, то python умеет подставлять пользовательские значения в строки с помощью функции .format(). Синтаксис выглядит
примерно так:

"Let's count together: {}, then goes {}, and then {}".format("one", "two", "three")
Попробуйте запустить её в интерпретаторе:

print("Let's count together: {}, then goes {}, and then {}".format("one", "two", "three"))

Такая строка при исполнении кода превратится в:
Let's count together: one, then goes two, and then three

Таким образом мы можем удобно компоновать ожидаемое и фактическое значение в одну строку.

Форматирование строк с помощью f-strings

И наконец наиболее современный способ форматирования строк, который появился в Python3.6, носит
название f-strings. Он позволяет исполнять выражения на Python прямо внутри строк, обладает еше
большей локаничностью и удобством использования. Для использования возможностей f-strings нужно
указывать символ f перед строкой в таком формате: f"ваша строка {my_var}". В фигурных скобках 
указывается имя переменной, значение которой надо подставить в строку, или выражение, результат
исполнения которого также требуется подставить в вашу строку.

Подробнее про f-strings можно почитать здесь:  https://realpython.com/python-string-formatting/#using-the-formatting-mini-language-with-f-strings.
Так как мы предпологаем, что вы используете последнюю версию Python, то предлагаем вам применять
именно этот подход в данном курсе.

Пример 1:
str1 = "one"
str2 = "two"
str3 = "three"
print(f"Let's count together: {str1}, then goes {str2}, and then {str3}")

Итог выполнения выражений в интерпретаторе:
Let's count together: one, then goes twoo, and then three

Пример 2:
actual_result = "abrakadabra"
f"Wrong text, got {actual_result}, something wrong"

Итог выполнения выражений в интерпретаторе:
Wrong text, got abrakadabra, somthing wrong

Пример 3:
>>> f"{2+3}"
'5'

Еще один важный момент: когда вы работаете с текстом элементов на странице или любым другим контентом,
который может измениться, всегда записывайте его в отдельную
