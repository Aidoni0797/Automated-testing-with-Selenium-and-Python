999999996

Классические фикстуры (fixtures)

Важной составляющей в использовании PyTest является концепция фикстур. Фикстуры в контексте PyTest - 
это вспомогательные функции для наших тестов, которые не являются частью тестовго сценария.

Назначение фикстур может быть самым разным. Одно из распространенных применений фикстур - это
подготовка тестовго окружения и очистка тестового окружения и данных после завершения теста.
Но, вообще говоря, фикстуры можно использовать для самых разных целей: для подключения к базе
данных, с которой работают тесты, создания тестовых файлов и подготовки данных в текущем
окружении с помощью API-методов. Более подробно про фикстуры в широком смысле вы можете прочитать
в Википедии. (https://en.wikipedia.org/wiki/Test_fixture#Software).

Классический способ работы с фикстурами - создание setup-, и teardown - методов в файле с тестами
(документация в PyTest - https://docs.pytest.org/en/latest/how-to/xunit_setup.html)

Можно создавать фикстуры для модулей, классов и отдельных функций. Давайте попробуем написать фикстуру
для инициализации браузера, который мы затем сможем использовать в наших тестах. После окончания
тестов мы будем автоматически закрывать браузер с помощью команды browser.quit(), чтобы в нашей
системе не оказалось множество открытых окон браузера. Вынесем инициализацию и закрытие браузера
в фикстуры, чтобы не писать этот код для каждого теста.

Будем сразу объединять наши тесты в тест-сьюты, роль тест-сьюта будут играть классы, в которых мы
будем хранить наши тесты.

Рассмотрим два примера: создание экземпляра браузера и его закрытие только один раз для всех тестов
первого тест-сьюта и создание браузера для каждого теста во втором тест-сьюте. Сохраните
следующий код в файл test_fixture1.py и запустите его с помощью PyTest. Не забудьте указать
параметр -s, чтобы увидеть текст, который выводится командой print().

pytest -s test_fixture1.py

test_foxture1.
