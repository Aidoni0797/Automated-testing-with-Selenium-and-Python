9995
Пример задачи для excute_script

Давайте теперь рассмотрим реальную ситуацию, когда пользователь должен кликнуть на элемент, который внезапно оказывается
пееркрыт другим элементом на странице.

Для клика в WebDriver мы используем метод click(). Если элемент оказывается перекрыт другим элементом, то наша программа
вызовет следующую ошибку:

selenium.common.exceptions.WebDriverException: Message: unknown error: Element <buttin type="submit" class="btn btn-default"
style="margin-bottom: 1000 px;">...</button> is not clickable at point (87, 420). Other element would receive the click:
<p>...</p>

Из описнаия ошибки можно понять, что указанный нами элемент нельзя кликнуть в данной точке, т.к. клик произойдет на другом
элементе с тегом <p>.

Чтобы увидеть пример данной ошибки, запустите следующий скрипт:

from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
link = "https://SunInJuly.github.io/execute_script.html"
browser.get(link)
button = browser.find_element(By.TAG_NAME, "button")
button.click()

Теперь вы можете сами посмотреть на эту страницу (https://suninjuly.github.io/execute_script.html) и увидеть, что огромный футер
действительно перекрывает нужную нам кнопку. Футером (footer) называется нижний блок, который обычно одинаков для всех страниц
сайта. Чтобы понять, как решить эту проблему, нужно разобраться, как работает метод click()/

В первую очередь WebDriver проверит, что ширина и высота элемента больше 0, чтобы по нему можно было кликнуть.

Затем, если элемент находится за границей окна браузера, WebDriver автоматически проскроллит страницу, чтобы элемент попал в
область видимости, то есть не находился за границей экрана. Но это не гарантирует того, что элемент не перекрыт другим 
элементом, который тоже находится в области видимости.

А в какую точку элемента будет происходить клик? Selenium рассчитывает координаты центра элемента и производит клик в
вычислительную точку. Это тоже приведёт к ошибке, если часть элемента всё-таки видна, но элемент перекрыт больше чем на 
половину своей высоты или ширины.
Если мы столкнулись с такой ситуацией, мы можем заставить браузер дополнительно проскроллить нужный элемент, чтобы он точно
стал видимым.
Делается это с помощью следующего скрипта:
"return arguments[0].scrollIntoView(true);"
Мы дополнительно передали в метод scrollIntoView аргумент true, чтобы элемент после скролла оказался в области видимости.
Другие возможные параметры метода можно посмотреть здесь: 
 https://developer.mozilla.org/ru/docs/Web/API/Element/scrollIntoView

В итоге, чтобы кликнуть на перекрытую кнопку, нам нужно выполнить следующие команды в коде:

button = browser.find_element(By.TAG_NAME, "button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()

В метод execute_script мы передали текст js-скрипта и найденный элементт button, к которому нужно будет проскроллить
страницу. После выполнения кода элемент button должен оказаться в верхней части страницы. Подробнее о методе см
 https://developer.mozilla.org/ru/docs/Web/API/Element/scrollIntoView .
Также можно проскроллить всю страницу целиком на строго заданное количество пикселей. Эта команда проскроллит страницу на
100 пикселей вниз:

browser.execute_script("wubdow.scrollBy(0,100);")

!Важно. Мы не будем в этом курсе изучать, как работает JavaScript, и обойдемся только приведенным выше примером скрипта с
прокруткой страницы. Для сравнения приведем скрипт на этом языке, который делает то же, что приведенный выше пример для
WebDriver:

//javascript
button = document.getElementByTagName("button")[0];
button.scrollIntoView(true);

Можете попробовать исполнить его в консоли браузера на странице  http://suninjuly.github.io/execute_script.html.  Для
этолго откройте инструменты разработчика в браузере, перейдите на складку консоль (console), скопируйте туда этот код 
и нажмите Enter. Таким образом можно протестировать кусочки
